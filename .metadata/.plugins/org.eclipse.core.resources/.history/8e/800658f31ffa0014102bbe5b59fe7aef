package com.example.teddemo;

import java.io.OutputStream;
import java.util.Iterator;
import java.util.List;

import com.example.teddemo.R;

import android.app.Activity;
import android.content.ContentValues;
import android.content.res.Configuration;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore.Images.Media;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;

public class HelloWorld extends Activity implements PictureCallback  {
	
	private static final String CAMERA_CONTROLL = "CAMERA_CONTROLL";  
	
	private Camera camera;  
	
	
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);  
        setContentView(R.layout.main);
        
        initCamera();
	}
	
	@Override
    protected void onStop() {  
        super.onStop(); 
        releaseCamera();
    } 
		

	private void initCamera(){
		int cameraNums = Camera.getNumberOfCameras();  
        Log.d(CAMERA_CONTROLL, cameraNums + "");  
        try {  
            camera = Camera.open(cameraNums - 1);  
        } catch (Exception e) {  
            Log.e(CAMERA_CONTROLL, e.getMessage());  
        }  
        try {
            Camera.Parameters parameters = camera.getParameters();  
            if (this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) {  
                parameters.set("orientation", "portrait");  
                camera.setDisplayOrientation(90);  
                parameters.setRotation(90);  
            }  
            List<String> colorEffects = parameters.getSupportedColorEffects();  
            if(colorEffects!=null){
	            Iterator<String> cei = colorEffects.iterator();  
	            while (cei.hasNext()) {  
	                String currentEffect = cei.next();  
	                if (currentEffect.equals(Camera.Parameters.EFFECT_SOLARIZE)) {  
	                    parameters  
	                            .setColorEffect(Camera.Parameters.EFFECT_SOLARIZE);  
	                    break;  
	                }  
	            }  
            }
    		  
            camera.setParameters(parameters);  
    		  
        } catch (Exception e) {  
            camera.release();  
        }  
	}
		
	@Override  
    public void onPictureTaken(byte[] data, Camera camera) {  
        Uri imageFileUri = getContentResolver().insert(  
                Media.EXTERNAL_CONTENT_URI, new ContentValues());  
        try {  
            OutputStream imageFileOS = getContentResolver().openOutputStream(  
                    imageFileUri);  
            imageFileOS.write(data);  
            imageFileOS.flush();  
            imageFileOS.close();  
        } catch (Exception e) {  
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();  
        }  
    }  

	private void releaseCamera(){
        camera.release();  
	}
	
	public void onClick(View v) {
		camera.takePicture(null, null, null, HelloWorld.this);
	}
	
	


}
